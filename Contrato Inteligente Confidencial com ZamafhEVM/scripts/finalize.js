const { ethers } = require("hardhat");
const { getSigners } = require("../utils/signers");

/**
 * Script para finalizar o leil√£o e revelar o vencedor
 */
async function main() {
  // Endere√ßo do contrato (substitua pelo endere√ßo real ap√≥s implanta√ß√£o)
  const CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS || "0x...";
  
  if (CONTRACT_ADDRESS === "0x...") {
    console.log("‚ùå Por favor, defina CONTRACT_ADDRESS no arquivo .env ou como vari√°vel de ambiente");
    process.exit(1);
  }
  
  console.log("üèÅ Finalizando leil√£o no contrato:", CONTRACT_ADDRESS);
  
  // Obter signers
  const signers = await getSigners();
  const { alice } = signers; // Alice √© o leiloeiro
  
  // Conectar ao contrato
  const BlindAuction = await ethers.getContractFactory("BlindAuction");
  const blindAuction = BlindAuction.attach(CONTRACT_ADDRESS);
  
  try {
    // Verificar informa√ß√µes atuais do leil√£o
    console.log("\nüìä Status atual do leil√£o:");
    const auctionInfo = await blindAuction.getAuctionInfo();
    console.log("   - Leiloeiro:", auctionInfo[0]);
    console.log("   - Item:", auctionInfo[1]);
    console.log("   - Fim programado:", new Date(Number(auctionInfo[2]) * 1000).toLocaleString());
    console.log("   - J√° finalizado:", auctionInfo[3]);
    console.log("   - Vencedor revelado:", auctionInfo[4]);
    console.log("   - Total de licitantes:", Number(auctionInfo[5]));
    
    const isActive = await blindAuction.isAuctionActive();
    console.log("   - Status ativo:", isActive);
    
    // Verificar se h√° licitantes
    const totalBidders = Number(auctionInfo[5]);
    if (totalBidders === 0) {
      console.log("\n‚ö†Ô∏è  Nenhum lance foi feito neste leil√£o");
      console.log("   N√£o √© poss√≠vel finalizar um leil√£o sem lances");
      return;
    }
    
    // Listar licitantes
    const bidders = await blindAuction.getBidders();
    console.log("\nüë• Licitantes participantes:");
    bidders.forEach((bidder, index) => {
      console.log(`   ${index + 1}. ${bidder}`);
    });
    
    // Finalizar leil√£o se ainda estiver ativo
    if (isActive) {
      console.log("\n‚è∞ Finalizando leil√£o...");
      const endTx = await blindAuction.connect(alice).endAuction();
      await endTx.wait();
      console.log("   ‚úÖ Leil√£o finalizado com sucesso");
    } else {
      console.log("\n‚úÖ Leil√£o j√° foi finalizado");
    }
    
    // Verificar se o vencedor j√° foi revelado
    const updatedInfo = await blindAuction.getAuctionInfo();
    const winnerRevealed = updatedInfo[4];
    
    if (!winnerRevealed) {
      console.log("\nüîì Revelando vencedor...");
      console.log("   ‚è≥ Solicitando descriptografia ao gateway FHEVM...");
      
      try {
        const revealTx = await blindAuction.connect(alice).revealWinner();
        await revealTx.wait();
        console.log("   ‚úÖ Solicita√ß√£o de revela√ß√£o enviada com sucesso");
        console.log("   üì° Aguardando processamento pelo gateway...");
        
        // Aguardar um pouco para o processamento
        console.log("   ‚è≥ Aguardando 10 segundos para processamento...");
        await new Promise(resolve => setTimeout(resolve, 10000));
        
        // Verificar se o vencedor foi revelado
        const finalInfo = await blindAuction.getAuctionInfo();
        if (finalInfo[4]) {
          console.log("\nüéâ Vencedor revelado com sucesso!");
          await displayResults(blindAuction);
        } else {
          console.log("\n‚è≥ Revela√ß√£o ainda em processamento...");
          console.log("   Execute este script novamente em alguns minutos para verificar o resultado");
        }
        
      } catch (error) {
        if (error.message.includes("Vencedor ja foi revelado")) {
          console.log("   ‚úÖ Vencedor j√° foi revelado anteriormente");
          await displayResults(blindAuction);
        } else {
          throw error;
        }
      }
    } else {
      console.log("\nüéâ Vencedor j√° foi revelado!");
      await displayResults(blindAuction);
    }
    
  } catch (error) {
    console.error("‚ùå Erro durante a finaliza√ß√£o:", error.message);
    
    if (error.message.includes("Apenas o leiloeiro")) {
      console.log("üí° Dica: Apenas o leiloeiro pode finalizar o leil√£o");
    } else if (error.message.includes("Leilao ja foi finalizado")) {
      console.log("üí° Dica: O leil√£o j√° foi finalizado anteriormente");
    }
  }
}

/**
 * Exibe os resultados finais do leil√£o
 */
async function displayResults(blindAuction) {
  try {
    const winner = await blindAuction.winner();
    const winningBid = await blindAuction.winningBid();
    
    console.log("\nüèÜ RESULTADOS FINAIS DO LEIL√ÉO:");
    console.log("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    console.log(`   ü•á Vencedor: ${winner}`);
    console.log(`   üí∞ Lance vencedor: ${winningBid.toString()} unidades`);
    console.log("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    
    console.log("\nüìã Pr√≥ximos passos:");
    console.log("   1. O vencedor pode reivindicar o item com claimItem()");
    console.log("   2. Os perdedores podem verificar seus lances (se implementado)");
    console.log("   3. O leiloeiro pode processar a entrega do item");
    
  } catch (error) {
    console.log("‚ö†Ô∏è  N√£o foi poss√≠vel obter os resultados finais:", error.message);
  }
}

// Executar script
if (require.main === module) {
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error("‚ùå Erro fatal:", error);
      process.exit(1);
    });
}

module.exports = { main, displayResults };